{"version":3,"sources":["angular-clock.min.js"],"names":["clock","$interval","restrict","scope","gmtOffset","template","link","element","attrs","stopTime","o","showSecs","undefined","hideSecs","showAmPm","showDigital","showAnalog","showGmtInfo","startTime","parseInt","theme","gmtInfo","date","getDate","digital","analog","majors","Array","minors","tick","isNaN","timeText","$watch","value","getGMTbase100","getGMTText","on","cancel","offset","parseFloat","f","Math","floor","ceil","s","round","lpad","rpad","substring","num","now","Date","utc","getTime","getTimezoneOffset","offsetNow","year","getFullYear","month","getMonth","day","hrs","getHours","mins","getMinutes","secs","getSeconds","d","angular","module","directive","dateFilter"],"mappings":"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","file":"angular-clock.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  /* <ds-widget-clock data-gmt-offset=\"0\"></ds-widget-clock> */\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  angular.module('ds.clock', [])\n    .directive('dsWidgetClock', ['$interval', 'dateFilter',\n      function($interval, dateFilter) {\n        return clock($interval, dateFilter);\n      }\n    ]);\n\n  function clock($interval, dateFilter) {\n    return {\n      restrict: 'EA',\n      scope: {\n        gmtOffset: '=gmtOffset'\n      },\n      template: '<div class=\"widget-clock\" ng-class=\"theme\" ng-if=\"date\"><div class=\"digital\" ng-if=\"digital\"><span class=\"time\"><span class=\"hours\">{{digital}}</span></span></div><div class=\"analog\" ng-if=\"analog\"><div class=\"square\"><svg viewBox=\"0 0 100 100\"><g transform=\"translate(50,50)\"><circle class=\"clock-face\" r=\"48\" /><line ng-repeat=\"minor in minors track by $index\" class=\"minor\" y1=\"42\" y2=\"45\" ng-attr-transform=\"rotate({{360 * $index / minors.length}})\" /><line ng-repeat=\"major in majors track by $index\" class=\"major\" y1=\"35\" y2=\"46\" ng-attr-transform=\"rotate({{360 * $index / majors.length}})\" /><line class=\"hour\" y1=\"2\" y2=\"-20\" ng-attr-transform=\"rotate({{30 * date.hrs + date.mins / 2}})\" /><line class=\"minute\" y1=\"4\" y2=\"-30\" ng-attr-transform=\"rotate({{6 * date.mins + date.secs / 10}})\" /><g ng-attr-transform=\"rotate({{6 * date.secs}})\"><line class=\"second\" y1=\"10\" y2=\"-38\" /><line class=\"second-counterweight\" y1=\"10\" y2=\"2\" /></g></g></svg></div></div><div ng-if=\"gmtInfo\" class=\"gmt-info\">{{gmtInfo}}</div></div>',\n      link: function(scope, element, attrs) {\n        var format, // date format\n          stopTime; // so that we can cancel the time updates\n        var o = {}; //angular.copy(defaults)\n        var gmtOffset = scope.gmtOffset;\n        //o.gmtOffset = (gmtOffset !== undefined && gmtOffset !== null) ? parseFloat(gmtOffset) : false;\n        o.showSecs = attrs.hideSecs !== undefined ? false : true;\n        o.showAmPm = attrs.showAmPm !== undefined ? true : false;\n        o.showDigital = attrs.showDigital !== undefined ? true : false;\n        o.showAnalog = attrs.showAnalog !== undefined ? true : false;\n        o.showGmtInfo = attrs.showGmtInfo !== undefined ? true : false;\n        o.startTime = parseInt(attrs.startTime, 10); // ms\n        scope.theme = attrs.theme !== undefined ? attrs.theme : \"light\";\n        if (!o.showDigital && !o.showAnalog) {\n          o.showAnalog = true;\n          o.showDigital = true;\n        }\n        scope.gmtInfo = false;\n\n        scope.date = getDate(o);\n\n        scope.digital = o.showDigital ? 'Loading..' : false;\n        scope.analog = o.showAnalog;\n        scope.majors = new Array(12);\n        scope.minors = new Array(60);\n        var date = null;\n        var tick = function() {\n          if (!isNaN(o.startTime)) {\n            o.startTime = o.startTime + 1000;\n          }\n          date = getDate(o);\n          scope.date = date;\n          if (o.showDigital) {\n            scope.digital = timeText(date, o);\n          }\n        };\n\n        stopTime = $interval(tick, 1000);\n        // watch the expression, and update the UI on change.\n        scope.$watch('gmtOffset', function(value) {\n          gmtOffset = value;\n          o.gmtOffset = (gmtOffset !== undefined && gmtOffset !== null) ? getGMTbase100(gmtOffset) : false;\n          if (o.showGmtInfo && o.gmtOffset !== false) {\n            scope.gmtInfo = getGMTText(o.gmtOffset);\n          }\n          tick();\n        });\n        // listen on DOM destroy (removal) event, and cancel the next UI update\n        // to prevent updating time after the DOM element was removed.\n        element.on('$destroy', function() {\n          $interval.cancel(stopTime);\n          stopTime = null;\n        });\n\n      }\n    };\n  }\n\n  function getGMTbase100(offset) {\n    offset = parseFloat(offset);\n    var f = offset > 0 ? Math.floor(offset) : Math.ceil(offset),\n      s = (offset % 1) / 0.6;\n\n    return f + s;\n\n  }\n\n  function getGMTbase60(offset) {\n    var f = offset > 0 ? Math.floor(offset) : Math.ceil(offset),\n      s = ((offset > 0 ? offset : offset * -1) % 1) * 60;\n    return f + s;\n\n  }\n\n  function getGMTText(offset) {\n\n    var f = offset > 0 ? Math.floor(offset) : Math.ceil(offset),\n      s = Math.round(((offset > 0 ? offset : offset * -1) % 1) * 60);\n\n    return 'GMT' + (offset === 0 ? '' : ((offset > 0 ? ' +' : ' ') + lpad(f) + '.' + rpad(s).substring(0, 2)));\n\n  }\n\n  function lpad(num) {\n    if (num < 0) {\n      return (num > -10 ? '-0' : '-') + (num * -1);\n    } else {\n      return (num < 10 ? '0' : '') + num;\n    }\n\n  }\n\n  function rpad(num) {\n    return num + (num < 10 ? '0' : '');\n  }\n  // Checkfor offset and get correct time\n  function getDate(o) {\n    var now = (!isNaN(o.startTime)) ? new Date(o.startTime) : new Date();\n    if (o.gmtOffset !== null && o.gmtOffset !== false) {\n      // Use GMT + gmtOffset\n      // convert to msec\n      // add local time zone offset\n      // get UTC time in msec\n      var utc = now.getTime() + (now.getTimezoneOffset() * 60000);\n      // create new Date object for different city\n      // using supplied offset\n      var offsetNow = new Date(utc + (3600000 * o.gmtOffset));\n      return {\n        year: offsetNow.getFullYear(),\n        month: offsetNow.getMonth() + 1,\n        day: offsetNow.getDate(),\n        hrs: offsetNow.getHours(),\n        mins: offsetNow.getMinutes(),\n        secs: offsetNow.getSeconds()\n      };\n    } else {\n      // Use local time\n      return {\n        year: now.getFullYear(),\n        month: now.getMonth() + 1,\n        day: now.getDate(),\n        hrs: now.getHours(),\n        mins: now.getMinutes(),\n        secs: now.getSeconds()\n      };\n    }\n  }\n\n  function timeText(d, o) {\n    return '' +\n      d.year + '-' +\n      d.month + '-' +\n      d.day + ' ' +\n      (o.showAmPm ? ((d.hrs % 12) === 0 ? 12 : (d.hrs % 12)) : d.hrs) + ':' +\n      lpad(d.mins) +\n      (o.showSecs ? ':' + lpad(d.secs) : '') +\n      (o.showAmPm ? (d.hrs < 12 ? ' AM' : ' PM') : '');\n  }\n\n})();\n"],"sourceRoot":"/source/"}